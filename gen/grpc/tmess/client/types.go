// Code generated by goa v3.0.10, DO NOT EDIT.
//
// tmess gRPC client types
//
// Command:
// $ goa gen terminal-chat/design

package client

import (
	tmesspb "terminal-chat/gen/grpc/tmess/pb"
	tmess "terminal-chat/gen/tmess"
	tmessviews "terminal-chat/gen/tmess/views"

	goa "goa.design/goa/v3/pkg"
)

// NewLoginRequest builds the gRPC request type from the payload of the "login"
// endpoint of the "tmess" service.
func NewLoginRequest() *tmesspb.LoginRequest {
	message := &tmesspb.LoginRequest{}
	return message
}

// NewLoginResult builds the result type of the "login" endpoint of the "tmess"
// service from the gRPC response type.
func NewLoginResult(message *tmesspb.LoginResponse) string {
	result := message.Field
	return result
}

func NewEchoerResponse(v *tmesspb.EchoerResponse) string {
	result := v.Field
	return result
}

func NewEchoerStreamingRequest(spayload string) *tmesspb.EchoerStreamingRequest {
	v := &tmesspb.EchoerStreamingRequest{}
	v.Field = spayload
	return v
}

func NewListenerStreamingRequest(spayload string) *tmesspb.ListenerStreamingRequest {
	v := &tmesspb.ListenerStreamingRequest{}
	v.Field = spayload
	return v
}

func NewChatSummaryCollection(v *tmesspb.ChatSummaryCollection) tmessviews.ChatSummaryCollectionView {
	vresult := make([]*tmessviews.ChatSummaryView, len(v.Field))
	for i, val := range v.Field {
		vresult[i] = &tmessviews.ChatSummaryView{
			Message: &val.Message_,
			SentAt:  &val.SentAt,
		}
		if val.Length != 0 {
			lengthptr := int(val.Length)
			vresult[i].Length = &lengthptr
		}
	}
	return vresult
}

func NewSummaryStreamingRequest(spayload string) *tmesspb.SummaryStreamingRequest {
	v := &tmesspb.SummaryStreamingRequest{}
	v.Field = spayload
	return v
}

// NewSubscribeRequest builds the gRPC request type from the payload of the
// "subscribe" endpoint of the "tmess" service.
func NewSubscribeRequest() *tmesspb.SubscribeRequest {
	message := &tmesspb.SubscribeRequest{}
	return message
}

func NewEvent(v *tmesspb.SubscribeResponse) *tmess.Event {
	result := &tmess.Event{
		Message: v.Message_,
		Action:  v.Action,
		AddedAt: v.AddedAt,
	}
	return result
}

// NewHistoryRequest builds the gRPC request type from the payload of the
// "history" endpoint of the "tmess" service.
func NewHistoryRequest() *tmesspb.HistoryRequest {
	message := &tmesspb.HistoryRequest{}
	return message
}

func NewChatSummaryView(v *tmesspb.HistoryResponse) *tmessviews.ChatSummaryView {
	vresult := &tmessviews.ChatSummaryView{
		Message: &v.Message_,
		SentAt:  &v.SentAt,
	}
	if v.Length != 0 {
		lengthptr := int(v.Length)
		vresult.Length = &lengthptr
	}
	return vresult
}

// ValidateChatSummaryCollection runs the validations defined on
// ChatSummaryCollection.
func ValidateChatSummaryCollection(message *tmesspb.ChatSummaryCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateChatSummary(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChatSummary runs the validations defined on ChatSummary.
func ValidateChatSummary(message *tmesspb.ChatSummary) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.sent_at", message.SentAt, goa.FormatDateTime))

	return
}

// ValidateSubscribeResponse runs the validations defined on SubscribeResponse.
func ValidateSubscribeResponse(message *tmesspb.SubscribeResponse) (err error) {
	if !(message.Action == "added") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.action", message.Action, []interface{}{"added"}))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.added_at", message.AddedAt, goa.FormatDateTime))

	return
}

// ValidateHistoryResponse runs the validations defined on HistoryResponse.
func ValidateHistoryResponse(message *tmesspb.HistoryResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.sent_at", message.SentAt, goa.FormatDateTime))

	return
}
