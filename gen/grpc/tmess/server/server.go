// Code generated by goa v3.0.10, DO NOT EDIT.
//
// tmess gRPC server
//
// Command:
// $ goa gen terminal-chat/design

package server

import (
	"context"
	tmesspb "terminal-chat/gen/grpc/tmess/pb"
	tmess "terminal-chat/gen/tmess"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the tmesspb.TmessServer interface.
type Server struct {
	LoginH     goagrpc.UnaryHandler
	EchoerH    goagrpc.StreamHandler
	ListenerH  goagrpc.StreamHandler
	SummaryH   goagrpc.StreamHandler
	SubscribeH goagrpc.StreamHandler
	HistoryH   goagrpc.StreamHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// EchoerServerStream implements the tmess.EchoerServerStream interface.
type EchoerServerStream struct {
	stream tmesspb.Tmess_EchoerServer
}

// ListenerServerStream implements the tmess.ListenerServerStream interface.
type ListenerServerStream struct {
	stream tmesspb.Tmess_ListenerServer
}

// SummaryServerStream implements the tmess.SummaryServerStream interface.
type SummaryServerStream struct {
	stream tmesspb.Tmess_SummaryServer
	view   string
}

// SubscribeServerStream implements the tmess.SubscribeServerStream interface.
type SubscribeServerStream struct {
	stream tmesspb.Tmess_SubscribeServer
}

// HistoryServerStream implements the tmess.HistoryServerStream interface.
type HistoryServerStream struct {
	stream tmesspb.Tmess_HistoryServer
	view   string
}

// New instantiates the server struct with the tmess service endpoints.
func New(e *tmess.Endpoints, uh goagrpc.UnaryHandler, sh goagrpc.StreamHandler) *Server {
	return &Server{
		LoginH:     NewLoginHandler(e.Login, uh),
		EchoerH:    NewEchoerHandler(e.Echoer, sh),
		ListenerH:  NewListenerHandler(e.Listener, sh),
		SummaryH:   NewSummaryHandler(e.Summary, sh),
		SubscribeH: NewSubscribeHandler(e.Subscribe, sh),
		HistoryH:   NewHistoryHandler(e.History, sh),
	}
}

// NewLoginHandler creates a gRPC handler which serves the "tmess" service
// "login" endpoint.
func NewLoginHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLoginRequest, EncodeLoginResponse)
	}
	return h
}

// Login implements the "Login" method in tmesspb.TmessServer interface.
func (s *Server) Login(ctx context.Context, message *tmesspb.LoginRequest) (*tmesspb.LoginResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "login")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tmess")
	resp, err := s.LoginH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*tmesspb.LoginResponse), nil
}

// NewEchoerHandler creates a gRPC handler which serves the "tmess" service
// "echoer" endpoint.
func NewEchoerHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeEchoerRequest)
	}
	return h
}

// Echoer implements the "Echoer" method in tmesspb.TmessServer interface.
func (s *Server) Echoer(stream tmesspb.Tmess_EchoerServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "echoer")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tmess")
	p, err := s.EchoerH.Decode(ctx, nil)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	ep := &tmess.EchoerEndpointInput{
		Stream:  &EchoerServerStream{stream: stream},
		Payload: p.(*tmess.EchoerPayload),
	}
	err = s.EchoerH.Handle(ctx, ep)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewListenerHandler creates a gRPC handler which serves the "tmess" service
// "listener" endpoint.
func NewListenerHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeListenerRequest)
	}
	return h
}

// Listener implements the "Listener" method in tmesspb.TmessServer interface.
func (s *Server) Listener(stream tmesspb.Tmess_ListenerServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "listener")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tmess")
	p, err := s.ListenerH.Decode(ctx, nil)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	ep := &tmess.ListenerEndpointInput{
		Stream:  &ListenerServerStream{stream: stream},
		Payload: p.(*tmess.ListenerPayload),
	}
	err = s.ListenerH.Handle(ctx, ep)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewSummaryHandler creates a gRPC handler which serves the "tmess" service
// "summary" endpoint.
func NewSummaryHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeSummaryRequest)
	}
	return h
}

// Summary implements the "Summary" method in tmesspb.TmessServer interface.
func (s *Server) Summary(stream tmesspb.Tmess_SummaryServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "summary")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tmess")
	p, err := s.SummaryH.Decode(ctx, nil)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	ep := &tmess.SummaryEndpointInput{
		Stream:  &SummaryServerStream{stream: stream},
		Payload: p.(*tmess.SummaryPayload),
	}
	err = s.SummaryH.Handle(ctx, ep)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewSubscribeHandler creates a gRPC handler which serves the "tmess" service
// "subscribe" endpoint.
func NewSubscribeHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeSubscribeRequest)
	}
	return h
}

// Subscribe implements the "Subscribe" method in tmesspb.TmessServer interface.
func (s *Server) Subscribe(message *tmesspb.SubscribeRequest, stream tmesspb.Tmess_SubscribeServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "subscribe")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tmess")
	p, err := s.SubscribeH.Decode(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	ep := &tmess.SubscribeEndpointInput{
		Stream:  &SubscribeServerStream{stream: stream},
		Payload: p.(*tmess.SubscribePayload),
	}
	err = s.SubscribeH.Handle(ctx, ep)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	return nil
}

// NewHistoryHandler creates a gRPC handler which serves the "tmess" service
// "history" endpoint.
func NewHistoryHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeHistoryRequest)
	}
	return h
}

// History implements the "History" method in tmesspb.TmessServer interface.
func (s *Server) History(message *tmesspb.HistoryRequest, stream tmesspb.Tmess_HistoryServer) error {
	ctx := stream.Context()
	ctx = context.WithValue(ctx, goa.MethodKey, "history")
	ctx = context.WithValue(ctx, goa.ServiceKey, "tmess")
	p, err := s.HistoryH.Decode(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	ep := &tmess.HistoryEndpointInput{
		Stream:  &HistoryServerStream{stream: stream},
		Payload: p.(*tmess.HistoryPayload),
	}
	err = s.HistoryH.Handle(ctx, ep)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid-scopes":
				return goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return goagrpc.EncodeError(err)
	}
	return nil
}

// Send streams instances of "tmesspb.EchoerResponse" to the "echoer" endpoint
// gRPC stream.
func (s *EchoerServerStream) Send(res string) error {
	v := NewEchoerResponse(res)
	return s.stream.Send(v)
}

// Recv reads instances of "tmesspb.EchoerStreamingRequest" from the "echoer"
// endpoint gRPC stream.
func (s *EchoerServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewEchoerStreamingRequest(v), nil
}

func (s *EchoerServerStream) Close() error {
	// nothing to do here
	return nil
}

// Recv reads instances of "tmesspb.ListenerStreamingRequest" from the
// "listener" endpoint gRPC stream.
func (s *ListenerServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewListenerStreamingRequest(v), nil
}

func (s *ListenerServerStream) Close() error {
	// synchronize stream
	return s.stream.SendAndClose(nil)
}

// SendAndClose streams instances of "tmesspb.ChatSummaryCollection" to the
// "summary" endpoint gRPC stream.
func (s *SummaryServerStream) SendAndClose(res tmess.ChatSummaryCollection) error {
	vres := tmess.NewViewedChatSummaryCollection(res, "default")
	v := NewChatSummaryCollection(vres.Projected)
	return s.stream.SendAndClose(v)
}

// Recv reads instances of "tmesspb.SummaryStreamingRequest" from the "summary"
// endpoint gRPC stream.
func (s *SummaryServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewSummaryStreamingRequest(v), nil
}

// Send streams instances of "tmesspb.SubscribeResponse" to the "subscribe"
// endpoint gRPC stream.
func (s *SubscribeServerStream) Send(res *tmess.Event) error {
	v := NewSubscribeResponse(res)
	return s.stream.Send(v)
}

func (s *SubscribeServerStream) Close() error {
	// nothing to do here
	return nil
}

// Send streams instances of "tmesspb.HistoryResponse" to the "history"
// endpoint gRPC stream.
func (s *HistoryServerStream) Send(res *tmess.ChatSummary) error {
	vres := tmess.NewViewedChatSummary(res, s.view)
	v := NewHistoryResponse(vres.Projected)
	return s.stream.Send(v)
}

func (s *HistoryServerStream) Close() error {
	// nothing to do here
	return nil
}

// SetView sets the view.
func (s *HistoryServerStream) SetView(view string) {
	s.view = view
}
