// Code generated by goa v3.0.10, DO NOT EDIT.
//
// tmess HTTP server types
//
// Command:
// $ goa gen terminal-chat/design

package server

import (
	tmess "terminal-chat/gen/tmess"
	tmessviews "terminal-chat/gen/tmess/views"

	goa "goa.design/goa/v3/pkg"
)

// ChatSummaryResponseCollection is the type of the "tmess" service "summary"
// endpoint HTTP response body.
type ChatSummaryResponseCollection []*ChatSummaryResponse

// SubscribeResponseBody is the type of the "tmess" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
	Action  string `form:"action" json:"action" xml:"action"`
	// Time at which the message was added
	AddedAt string `form:"added_at" json:"added_at" xml:"added_at"`
}

// HistoryResponseBodyTiny is the type of the "tmess" service "history"
// endpoint HTTP response body.
type HistoryResponseBodyTiny struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
}

// HistoryResponseBody is the type of the "tmess" service "history" endpoint
// HTTP response body.
type HistoryResponseBody struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
	// Length of the message sent
	Length *int `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
	// Time at which the message was sent
	SentAt string `form:"sent_at" json:"sent_at" xml:"sent_at"`
}

// LoginUnauthorizedResponseBody is the type of the "tmess" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody string

// EchoerInvalidScopesResponseBody is the type of the "tmess" service "echoer"
// endpoint HTTP response body for the "invalid-scopes" error.
type EchoerInvalidScopesResponseBody string

// EchoerUnauthorizedResponseBody is the type of the "tmess" service "echoer"
// endpoint HTTP response body for the "unauthorized" error.
type EchoerUnauthorizedResponseBody string

// ListenerInvalidScopesResponseBody is the type of the "tmess" service
// "listener" endpoint HTTP response body for the "invalid-scopes" error.
type ListenerInvalidScopesResponseBody string

// ListenerUnauthorizedResponseBody is the type of the "tmess" service
// "listener" endpoint HTTP response body for the "unauthorized" error.
type ListenerUnauthorizedResponseBody string

// SummaryInvalidScopesResponseBody is the type of the "tmess" service
// "summary" endpoint HTTP response body for the "invalid-scopes" error.
type SummaryInvalidScopesResponseBody string

// SummaryUnauthorizedResponseBody is the type of the "tmess" service "summary"
// endpoint HTTP response body for the "unauthorized" error.
type SummaryUnauthorizedResponseBody string

// SubscribeInvalidScopesResponseBody is the type of the "tmess" service
// "subscribe" endpoint HTTP response body for the "invalid-scopes" error.
type SubscribeInvalidScopesResponseBody string

// SubscribeUnauthorizedResponseBody is the type of the "tmess" service
// "subscribe" endpoint HTTP response body for the "unauthorized" error.
type SubscribeUnauthorizedResponseBody string

// HistoryInvalidScopesResponseBody is the type of the "tmess" service
// "history" endpoint HTTP response body for the "invalid-scopes" error.
type HistoryInvalidScopesResponseBody string

// HistoryUnauthorizedResponseBody is the type of the "tmess" service "history"
// endpoint HTTP response body for the "unauthorized" error.
type HistoryUnauthorizedResponseBody string

// ChatSummaryResponse is used to define fields on response body types.
type ChatSummaryResponse struct {
	// Message sent to the server
	Message string `form:"message" json:"message" xml:"message"`
	// Length of the message sent
	Length *int `form:"length,omitempty" json:"length,omitempty" xml:"length,omitempty"`
	// Time at which the message was sent
	SentAt string `form:"sent_at" json:"sent_at" xml:"sent_at"`
}

// NewChatSummaryResponseCollection builds the HTTP response body from the
// result of the "summary" endpoint of the "tmess" service.
func NewChatSummaryResponseCollection(res tmessviews.ChatSummaryCollectionView) ChatSummaryResponseCollection {
	body := make([]*ChatSummaryResponse, len(res))
	for i, val := range res {
		body[i] = &ChatSummaryResponse{
			Message: *val.Message,
			Length:  val.Length,
			SentAt:  *val.SentAt,
		}
	}
	return body
}

// NewSubscribeResponseBody builds the HTTP response body from the result of
// the "subscribe" endpoint of the "tmess" service.
func NewSubscribeResponseBody(res *tmess.Event) *SubscribeResponseBody {
	body := &SubscribeResponseBody{
		Message: res.Message,
		Action:  res.Action,
		AddedAt: res.AddedAt,
	}
	return body
}

// NewHistoryResponseBodyTiny builds the HTTP response body from the result of
// the "history" endpoint of the "tmess" service.
func NewHistoryResponseBodyTiny(res *tmessviews.ChatSummaryView) *HistoryResponseBodyTiny {
	body := &HistoryResponseBodyTiny{
		Message: *res.Message,
	}
	return body
}

// NewHistoryResponseBody builds the HTTP response body from the result of the
// "history" endpoint of the "tmess" service.
func NewHistoryResponseBody(res *tmessviews.ChatSummaryView) *HistoryResponseBody {
	body := &HistoryResponseBody{
		Message: *res.Message,
		Length:  res.Length,
		SentAt:  *res.SentAt,
	}
	return body
}

// NewLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "tmess" service.
func NewLoginUnauthorizedResponseBody(res tmess.Unauthorized) LoginUnauthorizedResponseBody {
	body := LoginUnauthorizedResponseBody(res)
	return body
}

// NewEchoerInvalidScopesResponseBody builds the HTTP response body from the
// result of the "echoer" endpoint of the "tmess" service.
func NewEchoerInvalidScopesResponseBody(res tmess.InvalidScopes) EchoerInvalidScopesResponseBody {
	body := EchoerInvalidScopesResponseBody(res)
	return body
}

// NewEchoerUnauthorizedResponseBody builds the HTTP response body from the
// result of the "echoer" endpoint of the "tmess" service.
func NewEchoerUnauthorizedResponseBody(res tmess.Unauthorized) EchoerUnauthorizedResponseBody {
	body := EchoerUnauthorizedResponseBody(res)
	return body
}

// NewListenerInvalidScopesResponseBody builds the HTTP response body from the
// result of the "listener" endpoint of the "tmess" service.
func NewListenerInvalidScopesResponseBody(res tmess.InvalidScopes) ListenerInvalidScopesResponseBody {
	body := ListenerInvalidScopesResponseBody(res)
	return body
}

// NewListenerUnauthorizedResponseBody builds the HTTP response body from the
// result of the "listener" endpoint of the "tmess" service.
func NewListenerUnauthorizedResponseBody(res tmess.Unauthorized) ListenerUnauthorizedResponseBody {
	body := ListenerUnauthorizedResponseBody(res)
	return body
}

// NewSummaryInvalidScopesResponseBody builds the HTTP response body from the
// result of the "summary" endpoint of the "tmess" service.
func NewSummaryInvalidScopesResponseBody(res tmess.InvalidScopes) SummaryInvalidScopesResponseBody {
	body := SummaryInvalidScopesResponseBody(res)
	return body
}

// NewSummaryUnauthorizedResponseBody builds the HTTP response body from the
// result of the "summary" endpoint of the "tmess" service.
func NewSummaryUnauthorizedResponseBody(res tmess.Unauthorized) SummaryUnauthorizedResponseBody {
	body := SummaryUnauthorizedResponseBody(res)
	return body
}

// NewSubscribeInvalidScopesResponseBody builds the HTTP response body from the
// result of the "subscribe" endpoint of the "tmess" service.
func NewSubscribeInvalidScopesResponseBody(res tmess.InvalidScopes) SubscribeInvalidScopesResponseBody {
	body := SubscribeInvalidScopesResponseBody(res)
	return body
}

// NewSubscribeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "subscribe" endpoint of the "tmess" service.
func NewSubscribeUnauthorizedResponseBody(res tmess.Unauthorized) SubscribeUnauthorizedResponseBody {
	body := SubscribeUnauthorizedResponseBody(res)
	return body
}

// NewHistoryInvalidScopesResponseBody builds the HTTP response body from the
// result of the "history" endpoint of the "tmess" service.
func NewHistoryInvalidScopesResponseBody(res tmess.InvalidScopes) HistoryInvalidScopesResponseBody {
	body := HistoryInvalidScopesResponseBody(res)
	return body
}

// NewHistoryUnauthorizedResponseBody builds the HTTP response body from the
// result of the "history" endpoint of the "tmess" service.
func NewHistoryUnauthorizedResponseBody(res tmess.Unauthorized) HistoryUnauthorizedResponseBody {
	body := HistoryUnauthorizedResponseBody(res)
	return body
}

// NewLoginPayload builds a tmess service login endpoint payload.
func NewLoginPayload() *tmess.LoginPayload {
	return &tmess.LoginPayload{}
}

// NewEchoerPayload builds a tmess service echoer endpoint payload.
func NewEchoerPayload(token string) *tmess.EchoerPayload {
	return &tmess.EchoerPayload{
		Token: token,
	}
}

// NewListenerPayload builds a tmess service listener endpoint payload.
func NewListenerPayload(token string) *tmess.ListenerPayload {
	return &tmess.ListenerPayload{
		Token: token,
	}
}

// NewSummaryPayload builds a tmess service summary endpoint payload.
func NewSummaryPayload(token string) *tmess.SummaryPayload {
	return &tmess.SummaryPayload{
		Token: token,
	}
}

// NewSubscribePayload builds a tmess service subscribe endpoint payload.
func NewSubscribePayload(token string) *tmess.SubscribePayload {
	return &tmess.SubscribePayload{
		Token: token,
	}
}

// NewHistoryPayload builds a tmess service history endpoint payload.
func NewHistoryPayload(view *string, token string) *tmess.HistoryPayload {
	return &tmess.HistoryPayload{
		View:  view,
		Token: token,
	}
}

// ValidateChatSummaryResponse runs the validations defined on
// ChatSummaryResponse
func ValidateChatSummaryResponse(body *ChatSummaryResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.sent_at", body.SentAt, goa.FormatDateTime))

	return
}
